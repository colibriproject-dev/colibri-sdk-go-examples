x-default-logging: &logging
  driver: "json-file"
  options:
    max-size: "5m"
    max-file: "2"

services:
  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/config.yaml"]
    volumes:
      - ./dev/otel-collector/config.yaml:/etc/config.yaml
    ports:
      - "4317:4317"     # OTLP over gRPC receiver
      - "4318:4318"     # OTLP over HTTP receiver
      - "9464:9464"     # Prometheus exporter
      - "8888:8888"     # metrics endpoint
    networks:
      - dev
    depends_on:
      jaeger:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging: *logging

  # Jaeger for visualization
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - LOG_LEVEL=debug
    networks:
      - dev
    logging: *logging

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./dev/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    logging: *logging

  localstack:
    image: localstack/localstack:3.1
    ports:
      - "127.0.0.1:4510-4559:4510-4559"  # external service port range
      - "127.0.0.1:4566:4566"            # LocalStack Edge Proxy
    environment:
      - DEBUG=${DEBUG:-0}
      - SERVICES=sns,sqs,s3,lambda
      - DISABLE_CORS_HEADERS=1
      - DISABLE_CORS_CHECKS=1
      - DISABLE_CUSTOM_CORS_S3=1
    volumes:
      - "${TMPDIR:-/tmp}/localstack:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - ./dev/localstack/:/etc/localstack/init/ready.d/
    networks:
      - dev
    logging: *logging

  localstack-web:
    image: dantasrafael/localstack-web:0.0.1
    ports:
      - "3000:80"
    environment:
      - VITE_LOCALSTACK_ENDPOINT=http://172.17.0.1:4566
      - VITE_AWS_DEFAULT_REGION=us-east-1
      - VITE_AWS_ACCESS_KEY_ID=test
      - VITE_AWS_SECRET_ACCESS_KEY=test
    depends_on:
      - localstack
    networks:
      - dev

  redis:
    image: redis:8-alpine
    ports:
      - "6379:6379"
    networks:
      - dev

  postgres:
    image: postgres:17-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - "${PWD}/dev/postgres:/docker-entrypoint-initdb.d/"
      - "pgdata:/var/lib/postgresql/data"
    networks:
      - dev

#  school-module:
#    image: school-module
#    ports:
#      - "8080:8080"
#    environment:
#      ENVIRONMENT: development
#      APP_NAME: Colibri SDK Go Test - School Module
#      APP_TYPE: service
#      PORT: 8080
#      CLOUD: aws
#      CLOUD_PROJECT_ID: XYZ
#      CLOUD_HOST: http://localstack:4566
#      CLOUD_REGION: us-east-1
#      CLOUD_SECRET: no_secret
#      CLOUD_TOKEN: no_token
#      CLOUD_DISABLE_SSL: "true"
#      SQL_DB_HOST: postgres
#      SQL_DB_PORT: 5432
#      SQL_DB_USER: postgres
#      SQL_DB_PASSWORD: postgres
#      SQL_DB_NAME: school_module
#      SQL_DB_SSL_MODE: disable
#      SQL_DB_MIGRATION: "true"
#      CACHE_URI: redis:6379
#      STORAGE_BUCKET: meu-bucket
#      # OpenTelemetry configuration
#      OTEL_EXPORTER_OTLP_ENDPOINT: otel-collector:4317
#      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
#      OTEL_SERVICE_NAME: school-module
#    networks:
#      - dev

  finantial-module:
    image: finantial-module
    ports:
      - "8081:8081"
    environment:
      ENVIRONMENT: development      
      APP_NAME: Colibri SDK Go Test - Finantial Module
      APP_TYPE: service
      PORT: 8081
      CLOUD: aws
      CLOUD_PROJECT_ID: XYZ
      CLOUD_HOST: http://localstack:4566
      CLOUD_REGION: us-east-1
      CLOUD_SECRET: no_secret
      CLOUD_TOKEN: no_token
      CLOUD_DISABLE_SSL: "true"
      SQL_DB_HOST: postgres
      SQL_DB_PORT: 5432
      SQL_DB_USER: postgres
      SQL_DB_PASSWORD: postgres
      SQL_DB_NAME: finantial_module
      SQL_DB_SSL_MODE: disable
      SQL_DB_MIGRATION: "true"
      # OpenTelemetry configuration
      OTEL_EXPORTER_OTLP_ENDPOINT: otel-collector:4317
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_SERVICE_NAME: finantial-module
    networks:
      - dev

volumes:
  pgdata:

networks:
  dev: