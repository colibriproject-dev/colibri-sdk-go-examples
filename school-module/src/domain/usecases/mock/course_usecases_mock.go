// Code generated by MockGen. DO NOT EDIT.
// Source: course_usecases.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/colibri-project-io/colibri-sdk-go-examples/school-module/src/domain/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockICourseUsecases is a mock of ICourseUsecases interface.
type MockICourseUsecases struct {
	ctrl     *gomock.Controller
	recorder *MockICourseUsecasesMockRecorder
}

// MockICourseUsecasesMockRecorder is the mock recorder for MockICourseUsecases.
type MockICourseUsecasesMockRecorder struct {
	mock *MockICourseUsecases
}

// NewMockICourseUsecases creates a new mock instance.
func NewMockICourseUsecases(ctrl *gomock.Controller) *MockICourseUsecases {
	mock := &MockICourseUsecases{ctrl: ctrl}
	mock.recorder = &MockICourseUsecasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICourseUsecases) EXPECT() *MockICourseUsecasesMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockICourseUsecases) Create(ctx context.Context, model *models.CourseCreateUpdateDTO) (*models.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, model)
	ret0, _ := ret[0].(*models.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockICourseUsecasesMockRecorder) Create(ctx, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockICourseUsecases)(nil).Create), ctx, model)
}

// Delete mocks base method.
func (m *MockICourseUsecases) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockICourseUsecasesMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockICourseUsecases)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockICourseUsecases) GetAll(ctx context.Context) ([]models.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]models.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockICourseUsecasesMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockICourseUsecases)(nil).GetAll), ctx)
}

// GetById mocks base method.
func (m *MockICourseUsecases) GetById(ctx context.Context, id uuid.UUID) (*models.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*models.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockICourseUsecasesMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockICourseUsecases)(nil).GetById), ctx, id)
}

// Update mocks base method.
func (m *MockICourseUsecases) Update(ctx context.Context, id uuid.UUID, model *models.CourseCreateUpdateDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockICourseUsecasesMockRecorder) Update(ctx, id, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockICourseUsecases)(nil).Update), ctx, id, model)
}
