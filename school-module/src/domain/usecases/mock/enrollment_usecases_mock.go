// Code generated by MockGen. DO NOT EDIT.
// Source: enrollment_usecases.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/colibri-project-io/colibri-sdk-go-examples/school-module/src/domain/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIEnrollmentUsecases is a mock of IEnrollmentUsecases interface.
type MockIEnrollmentUsecases struct {
	ctrl     *gomock.Controller
	recorder *MockIEnrollmentUsecasesMockRecorder
}

// MockIEnrollmentUsecasesMockRecorder is the mock recorder for MockIEnrollmentUsecases.
type MockIEnrollmentUsecasesMockRecorder struct {
	mock *MockIEnrollmentUsecases
}

// NewMockIEnrollmentUsecases creates a new mock instance.
func NewMockIEnrollmentUsecases(ctrl *gomock.Controller) *MockIEnrollmentUsecases {
	mock := &MockIEnrollmentUsecases{ctrl: ctrl}
	mock.recorder = &MockIEnrollmentUsecasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEnrollmentUsecases) EXPECT() *MockIEnrollmentUsecasesMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIEnrollmentUsecases) Create(ctx context.Context, model *models.EnrollmentCreateDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIEnrollmentUsecasesMockRecorder) Create(ctx, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIEnrollmentUsecases)(nil).Create), ctx, model)
}

// Delete mocks base method.
func (m *MockIEnrollmentUsecases) Delete(ctx context.Context, params *models.EnrollmentDeleteParamsDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIEnrollmentUsecasesMockRecorder) Delete(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIEnrollmentUsecases)(nil).Delete), ctx, params)
}

// GetPage mocks base method.
func (m *MockIEnrollmentUsecases) GetPage(ctx context.Context, params *models.EnrollmentPageParamsDTO) (models.EnrollmentPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPage", ctx, params)
	ret0, _ := ret[0].(models.EnrollmentPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPage indicates an expected call of GetPage.
func (mr *MockIEnrollmentUsecasesMockRecorder) GetPage(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPage", reflect.TypeOf((*MockIEnrollmentUsecases)(nil).GetPage), ctx, params)
}

// UpdateStatus mocks base method.
func (m *MockIEnrollmentUsecases) UpdateStatus(ctx context.Context, studentID, courseID uuid.UUID, status models.EnrollmentStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, studentID, courseID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockIEnrollmentUsecasesMockRecorder) UpdateStatus(ctx, studentID, courseID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockIEnrollmentUsecases)(nil).UpdateStatus), ctx, studentID, courseID, status)
}
