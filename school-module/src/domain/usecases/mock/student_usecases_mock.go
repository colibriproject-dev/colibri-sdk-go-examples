// Code generated by MockGen. DO NOT EDIT.
// Source: student_usecases.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	multipart "mime/multipart"
	reflect "reflect"

	models "github.com/colibri-project-io/colibri-sdk-go-examples/school-module/src/domain/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIStudentUsecases is a mock of IStudentUsecases interface.
type MockIStudentUsecases struct {
	ctrl     *gomock.Controller
	recorder *MockIStudentUsecasesMockRecorder
}

// MockIStudentUsecasesMockRecorder is the mock recorder for MockIStudentUsecases.
type MockIStudentUsecasesMockRecorder struct {
	mock *MockIStudentUsecases
}

// NewMockIStudentUsecases creates a new mock instance.
func NewMockIStudentUsecases(ctrl *gomock.Controller) *MockIStudentUsecases {
	mock := &MockIStudentUsecases{ctrl: ctrl}
	mock.recorder = &MockIStudentUsecasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStudentUsecases) EXPECT() *MockIStudentUsecasesMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIStudentUsecases) Create(ctx context.Context, model *models.StudentCreateUpdateDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIStudentUsecasesMockRecorder) Create(ctx, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIStudentUsecases)(nil).Create), ctx, model)
}

// Delete mocks base method.
func (m *MockIStudentUsecases) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIStudentUsecasesMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIStudentUsecases)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockIStudentUsecases) GetAll(ctx context.Context, params *models.StudentParams) ([]models.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, params)
	ret0, _ := ret[0].([]models.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIStudentUsecasesMockRecorder) GetAll(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIStudentUsecases)(nil).GetAll), ctx, params)
}

// GetById mocks base method.
func (m *MockIStudentUsecases) GetById(ctx context.Context, id uuid.UUID) (*models.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*models.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIStudentUsecasesMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIStudentUsecases)(nil).GetById), ctx, id)
}

// Update mocks base method.
func (m *MockIStudentUsecases) Update(ctx context.Context, id uuid.UUID, model *models.StudentCreateUpdateDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIStudentUsecasesMockRecorder) Update(ctx, id, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIStudentUsecases)(nil).Update), ctx, id, model)
}

// UploadDocument mocks base method.
func (m *MockIStudentUsecases) UploadDocument(ctx context.Context, id uuid.UUID, file *multipart.File) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadDocument", ctx, id, file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadDocument indicates an expected call of UploadDocument.
func (mr *MockIStudentUsecasesMockRecorder) UploadDocument(ctx, id, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadDocument", reflect.TypeOf((*MockIStudentUsecases)(nil).UploadDocument), ctx, id, file)
}
