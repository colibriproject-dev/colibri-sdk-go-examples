// Code generated by MockGen. DO NOT EDIT.
// Source: enrollment_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/colibri-project-io/colibri-sdk-go-examples/school-module/src/domain/models"
	types "github.com/colibri-project-io/colibri-sdk-go/pkg/base/types"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockEnrollmentRepository is a mock of EnrollmentRepository interface.
type MockEnrollmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEnrollmentRepositoryMockRecorder
}

// MockEnrollmentRepositoryMockRecorder is the mock recorder for MockEnrollmentRepository.
type MockEnrollmentRepositoryMockRecorder struct {
	mock *MockEnrollmentRepository
}

// NewMockEnrollmentRepository creates a new mock instance.
func NewMockEnrollmentRepository(ctrl *gomock.Controller) *MockEnrollmentRepository {
	mock := &MockEnrollmentRepository{ctrl: ctrl}
	mock.recorder = &MockEnrollmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnrollmentRepository) EXPECT() *MockEnrollmentRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockEnrollmentRepository) Delete(ctx context.Context, studentID, courseID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, studentID, courseID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEnrollmentRepositoryMockRecorder) Delete(ctx, studentID, courseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEnrollmentRepository)(nil).Delete), ctx, studentID, courseID)
}

// FindByStudentIdAndCourseId mocks base method.
func (m *MockEnrollmentRepository) FindByStudentIdAndCourseId(ctx context.Context, studentId, courseId uuid.UUID) (*models.Enrollment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByStudentIdAndCourseId", ctx, studentId, courseId)
	ret0, _ := ret[0].(*models.Enrollment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByStudentIdAndCourseId indicates an expected call of FindByStudentIdAndCourseId.
func (mr *MockEnrollmentRepositoryMockRecorder) FindByStudentIdAndCourseId(ctx, studentId, courseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByStudentIdAndCourseId", reflect.TypeOf((*MockEnrollmentRepository)(nil).FindByStudentIdAndCourseId), ctx, studentId, courseId)
}

// FindPage mocks base method.
func (m *MockEnrollmentRepository) FindPage(ctx context.Context, page *types.PageRequest, filters *models.EnrollmentFilters) (models.EnrollmentPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPage", ctx, page, filters)
	ret0, _ := ret[0].(models.EnrollmentPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPage indicates an expected call of FindPage.
func (mr *MockEnrollmentRepositoryMockRecorder) FindPage(ctx, page, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPage", reflect.TypeOf((*MockEnrollmentRepository)(nil).FindPage), ctx, page, filters)
}

// Insert mocks base method.
func (m *MockEnrollmentRepository) Insert(ctx context.Context, model *models.EnrollmentCreateDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockEnrollmentRepositoryMockRecorder) Insert(ctx, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockEnrollmentRepository)(nil).Insert), ctx, model)
}

// UpdateStatus mocks base method.
func (m *MockEnrollmentRepository) UpdateStatus(ctx context.Context, studentID, courseID uuid.UUID, status models.EnrollmentStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, studentID, courseID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockEnrollmentRepositoryMockRecorder) UpdateStatus(ctx, studentID, courseID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockEnrollmentRepository)(nil).UpdateStatus), ctx, studentID, courseID, status)
}
